import asyncio

from aiogram.dispatcher.router import Router
from aiogram import F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters.callback_data import CallbackData
from spotify_api import spotify
from data_base import db
from filters import EmptyDataBaseFilter
from states import SetTokenState
from utils import update_admins

router = Router()


class AddSongCallbackFactory(CallbackData, prefix="fabAddSong"):
    uri: str


class ChangeSongsVote(CallbackData, prefix="fabAddVote"):
    uri: str
    action: str


async def get_menu_text():
    if await spotify.get_curr_track() is None:
        text = f'üî• –ª—é–¥–µ–π –≤ —Å–µ—Å—Å–∏–∏: {len(db.users)}'
    else:
        artists = await spotify.get_curr_track_artists()
        text = (f'üéß: {await spotify.get_curr_track_name()}\n\n'
                f"{'üòé' * len(artists)}Ô∏è: {', '.join(artists)}\n\n"
                f'üî• –ª—é–¥–µ–π –≤ —Å–µ—Å—Å–∏–∏: {len(db.users)}')
    return text


def get_admin_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω", callback_data="view_token"))
    builder.row(InlineKeyboardButton(text='–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', callback_data="change_mode"))
    builder.row(InlineKeyboardButton(text='–¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫', callback_data='add_track'))
    builder.row(InlineKeyboardButton(text="‚ùå –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é ‚ùå", callback_data="confirm_end_session"))
    builder.row(InlineKeyboardButton(text="üîÑ –æ–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data='menu'))
    builder.row(InlineKeyboardButton(text="‚èÆ", callback_data="previous_track"))
    builder.add(InlineKeyboardButton(text="‚èØ", callback_data="start_pause"))
    builder.add(InlineKeyboardButton(text="‚è≠", callback_data="next_track"))
    return builder.as_markup()


def get_user_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="ü§ì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω ü§ì", callback_data="view_token"))
    builder.row(InlineKeyboardButton(text='üéµ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ üéµ', callback_data="add_track"))
    builder.row(InlineKeyboardButton(text="üîÑ–æ–±–Ω–æ–≤–∏—Ç—åüîÑ", callback_data='menu'))
    if db.mode == db.SHARE_MODE:
        builder.row(InlineKeyboardButton(text="‚èÆ", callback_data="previous_track"))
        builder.add(InlineKeyboardButton(text="‚èØ", callback_data="start_pause"))
        builder.add(InlineKeyboardButton(text="‚è≠", callback_data="next_track"))
    return builder.as_markup()


def get_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='–≤ –º–µ–Ω—é', callback_data='menu'))
    return builder.as_markup()


async def admin_start(message: Message):
    builder = InlineKeyboardBuilder()
    if db.is_active():
        msg = await message.answer(text=f"—Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞ üî•\ntoken: {db.token}", reply_markup=get_menu_keyboard())
    else:
        builder.row(InlineKeyboardButton(text="–Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é", callback_data='start_session'))
        msg = await message.answer("Spotify üéß", reply_markup=builder.as_markup())
        db.update_last_message(message.from_user.id, msg)


async def user_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω", callback_data='set_token'))
    msg = await message.answer("Spotify üéß", reply_markup=builder.as_markup())
    db.update_last_message(message.from_user.id, msg)


async def menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    text = await get_menu_text()
    if user_id in db.admins:
        keyboard = get_admin_menu_keyboard()
        msg = await callback.message.edit_text(text=text, reply_markup=keyboard)
    elif user_id in db.users:
        keyboard = get_user_menu_keyboard()
        msg = await callback.message.edit_text(text=text, reply_markup=keyboard)
    db.update_last_message(user_id, msg)


@router.callback_query(F.data == "menu")
async def menu_callback(callback: CallbackQuery):
    await menu(callback)


@router.callback_query(F.data != "start_session", EmptyDataBaseFilter())
async def handle_not_active_session(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in db.admins:
        msg = await callback.message.edit_text("—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/start'",
                                               reply_markup=None)
    else:
        msg = await callback.message.edit_text("—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º –¥–ª—è –µ–µ –∑–∞–ø—É—Å–∫–∞")
    db.update_last_message(user_id, msg)


@router.callback_query(F.data == 'change_mode')
async def change_mode(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='share ‚ôªÔ∏è', callback_data="set_share_mode"))
    builder.row(InlineKeyboardButton(text='poll ‚úÖ‚ùé', callback_data='set_poll_mode'))
    msg = await callback.message.edit_text(text='–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', reply_markup=builder.as_markup())
    db.update_last_message(callback.from_user.id, msg)


@router.callback_query(F.data == 'set_share_mode')
async def set_share_mode(callback: CallbackQuery):
    db.mode = db.SHARE_MODE
    msg = await callback.message.edit_text(text='—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º share ‚ôªÔ∏è', reply_markup=get_menu_keyboard())
    db.update_last_message(callback.from_user.id, msg)


@router.callback_query(F.data == 'set_poll_mode')
async def set_share_mode(callback: CallbackQuery):
    db.mode = db.POLL_MODE
    msg = await callback.message.edit_text(text='—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º poll ‚úÖ‚ùé', reply_markup=get_menu_keyboard())
    db.update_last_message(callback.from_user.id, msg)


@router.message(Command("start"))
async def start_by_command(message: Message):
    await asyncio.sleep(0.2)
    user_id = message.from_user.id
    user_name = message.from_user.username
    #TODO —É–±—Ä–∞—Ç—å –Ω–∞ —Ä–µ–ª–∏–∑–µ
    update_admins(user_id, user_name)
    await db.del_last_message(user_id)
    await asyncio.sleep(0.3)
    if user_id in db.admins:
        await admin_start(message)
    else:
        await user_start(message)
    await message.delete()


@router.callback_query(F.data == 'start_session')
async def start_session(callback: CallbackQuery):
    db.set_token()
    msg = await callback.message.edit_text(text=f"—Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞ üî•\n"
                                                f"token: {db.token}", reply_markup=get_menu_keyboard())
    db.update_last_message(callback.from_user.id, msg)


@router.callback_query(F.data == 'view_token')
async def view_token(callback: CallbackQuery):
    msg = await callback.message.edit_text(f"token: {db.token}", reply_markup=get_menu_keyboard())
    db.update_last_message(callback.from_user.id, msg)


@router.callback_query(F.data == 'set_token')
async def set_user_token(callback: CallbackQuery, state: FSMContext):
    msg = await callback.message.edit_text("–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    db.update_last_message(callback.from_user.id, msg)
    await state.set_state(SetTokenState.add_user)


@router.message(F.text.len() > 0, SetTokenState.add_user)
async def add_user_to_session(message: Message, state: FSMContext):
    token = message.text
    user_id = message.from_user.id
    print(user_id)
    print(message.from_user.username)
    if db.token == token:
        db.del_last_message()
        await asyncio.sleep(0.3)
        db.add_user(user_id)
        msg = await message.answer(text="–≤—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏", reply_markup=get_user_menu_keyboard())
        await message.delete()
        await state.clear()
    else:
        db.del_last_message()
        await asyncio.sleep(0.3)
        msg = await message.answer(text='–≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞')
        await message.delete()
    db.update_last_message(user_id, msg)


@router.callback_query(F.data == "add_track")
async def search_track_callback(callback: CallbackQuery):
    db.update_last_message(callback.from_user.id, await callback.message.edit_text("–≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å üîé"))


@router.message(F.text)
async def search_track_handler(message: Message):
    if db.is_active():
        await db.del_last_message(message.from_user.id)
        user_id = message.from_user.id
        if user_id in db.users:
            list_of_results = spotify.search(message.text)
            keyboard = InlineKeyboardBuilder()
            request = {}
            for item in list_of_results:
                song_info = ' - '.join(item[0:2])
                raw_uri = spotify.get_raw_iru(item[-1])
                request[raw_uri] = song_info
                keyboard.button(text=song_info, callback_data=AddSongCallbackFactory(uri=raw_uri))
            db.update_last_request(user_id, request)
            keyboard.adjust(1)
            keyboard.row(InlineKeyboardButton(text='–Ω–∞–∑–∞–¥', callback_data='menu'))
            msg = await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ üòä", reply_markup=keyboard.as_markup())
            await message.delete()
        else:
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text='–≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω', callback_data="set_token"))
            msg = await message.answer(text='–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏ ‚å®Ô∏è', reply_markup=builder.as_markup())
            await message.delete()
        db.update_last_message(user_id, msg)
    else:
        await db.del_last_message(message.from_user.id)
        await asyncio.sleep(0.3)
        msg = await message.answer("—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/start'",
                                   reply_markup=None)
        await message.delete()
        db.update_last_message(message.from_user.id, msg)


@router.callback_query(AddSongCallbackFactory.filter())
async def make_poll(callback: CallbackQuery, callback_data: AddSongCallbackFactory, bot: Bot):
    raw_uri = callback_data.uri
    user_id = callback.from_user.id
    if user_id in db.admins or db.mode == db.SHARE_MODE:
        spotify.add_track_to_queue(spotify.get_full_uri(raw_uri))
        msg = await callback.message.edit_text("—Ç—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å üëå", reply_markup=get_menu_keyboard())
        db.update_last_message(user_id, msg)
    elif db.mode == db.POLL_MODE:
        db.add_song_to_poll(raw_uri)
        msg = await callback.message.edit_text("—Ç—Ä–µ–∫ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ üëå", reply_markup=get_menu_keyboard())
        db.update_last_message(user_id, msg)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ", callback_data=ChangeSongsVote(uri=raw_uri, action="add"))
        builder.button(text="‚ùé", callback_data=ChangeSongsVote(uri=raw_uri, action="ignore"))
        for user in db.users:
            if user != callback.from_user.id:
                msg = await bot.send_message(text=f"–¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å "
                                                  f"{db.last_request[callback.from_user.id][raw_uri]}?",
                                             chat_id=user,
                                             reply_markup=builder.as_markup())
                db.update_last_message(user, msg)


@router.callback_query(ChangeSongsVote.filter())
async def check_vote(callback: CallbackQuery, callback_data: ChangeSongsVote):
    try:
        if callback_data.action == 'add':
            db.add_vote(callback_data.uri)
        msg = await callback.message.edit_text(text=f"–≥–æ–ª–æ—Å —É—á—Ç–µ–Ω üòâ, '–∑–∞' –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª(–æ) "
                                                    f"{db.get_amount_votes(callback_data.uri)} —á–µ–ª–æ–≤–µ–∫(–∞)",
                                               reply_markup=None)
    except KeyError:
        msg = await callback.message.edit_text("–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —ç—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ üòî", reply_markup=None)
    await asyncio.sleep(2)
    await callback.message.delete()


@router.callback_query(F.data == 'start_pause')
async def start_pause_track(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in db.admins or db.mode == db.SHARE_MODE:
        await spotify.start_pause()


@router.callback_query(F.data == 'next_track')
async def next_track(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in db.admins or db.mode == db.SHARE_MODE:
        await spotify.next_track()
        await menu(callback)


@router.callback_query(F.data == 'previous_track')
async def previous_track(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in db.admins or db.mode == db.SHARE_MODE:
        await spotify.previous_track()
        await menu(callback)


@router.callback_query(F.data == 'confirm_end_session')
async def confirm_end_session(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ", callback_data="end_session"))
    builder.add(InlineKeyboardButton(text='‚ùé', callback_data="menu"))
    msg = await callback.message.edit_text(text="–≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é?",
                                           reply_markup=builder.as_markup())
    db.update_last_message(callback.from_user.id, msg)


@router.callback_query(F.data == 'end_session')
async def end_session(callback: CallbackQuery):
    db.clear()
    msg = await callback.message.edit_text(text='—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "/start"',
                                           reply_markup=None)
    db.update_last_message(callback.from_user.id, msg)
